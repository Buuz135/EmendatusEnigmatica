buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://modmaven.dev/' }
//        maven { url "https://repo.spongepowered.org/maven/" }
        maven {
            name "Sponge"
            url "https://repo.spongepowered.org/repository/maven-public/"
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
//        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

plugins {
    id "maven-publish"
    id 'com.github.johnrengelman.shadow' version '4.0.4'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'

apply plugin: 'org.spongepowered.mixin'

configurations {
    shade
    compile.extendsFrom shade
}

version = '1.1'
group = 'com.ridanisaurus.emendatusenigmatica' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'emendatusenigmatica'

// sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: mcp_version
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/at.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            arg '-mixin.config=emendatusenigmatica.mixins.json'

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'
//            properties 'mixin.env.disableRefMap': 'true'
            source sourceSets.main
        }

        server {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            arg '-mixin.config=emendatusenigmatica.mixins.json'

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'
//            properties 'mixin.env.disableRefMap': 'true'
            source sourceSets.main
        }

        data {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            arg '-mixin.config=emendatusenigmatica.mixins.json'

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'
//            properties 'mixin.env.disableRefMap': 'true'

            args '--mod', 'emendatusenigmatica', '--all', '--output', '"' + rootProject.file('src/generated/resources/') + '"', '--existing', '"' + sourceSets.main.resources.srcDirs[0] + '"'
            source sourceSets.main
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

repositories {
    // JEI
    maven { name = "Progwml6 maven"; url = "https://dvs1.progwml6.com/files/maven/" }
    maven {
        url 'https://repo.spongepowered.org/maven/'
    }
    maven { url 'https://modmaven.dev/' }
    maven {
        url = "https://www.cursemaven.com"
    }
    maven { url 'https://maven.blamejared.com' }
    // IE
//    maven {	name = "BlameJared"; url = "https://maven.blamejared.com/" }
//    maven {
//        // location of a maven mirror for JEI files, as a fallback
//        name = "ModMaven"
//        url = "https://modmaven.k-4u.nl"
//    }
}

dependencies {
//    implementation 'org.jetbrains:annotations:20.1.0'
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    shade 'org.spongepowered:noise:2.0.0-SNAPSHOT'
//    implementation 'org.spongepowered:mixin:0.8-SNAPSHOT'

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

//    compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
//    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")

    runtimeOnly fg.deobf("curse.maven:jei-238222:4066007")

    compileOnly "mekanism:Mekanism:${mc_version}-${mekanism_version}:api"
    runtimeOnly fg.deobf("mekanism:Mekanism:${mc_version}-${mekanism_version}")// core

    runtimeOnly fg.deobf("curse.maven:worldstripper-250603:3921630")
    runtimeOnly fg.deobf("curse.maven:the-one-probe-245211:3965693")
    runtimeOnly fg.deobf("curse.maven:the-undergarden-379849:4057184")
    runtimeOnly fg.deobf("curse.maven:create-328085:4011414")
//    runtimeOnly fg.deobf("curse.maven:blood-magic-224791:3540807")
//    runtimeOnly fg.deobf("curse.maven:patchouli-306770:4031402")
//    runtimeOnly fg.deobf("curse.maven:ars-nouveau-401955:4060866")
//    runtimeOnly fg.deobf("curse.maven:geckolib-388172:4064451")
//    runtimeOnly fg.deobf("curse.maven:occultism-361026:4061171")
//    runtimeOnly fg.deobf("curse.maven:modonomicon-538392:4066224")
//    runtimeOnly fg.deobf("curse.maven:curios-309927:3924518")
//    runtimeOnly fg.deobf("curse.maven:thermal-expansion-69163:3556990")
//    runtimeOnly fg.deobf("curse.maven:thermal-foundation-222880:3556953")
//    runtimeOnly fg.deobf("curse.maven:cofh-core-69162:3556973")
//    runtimeOnly fg.deobf("curse.maven:shutup-experimental-settings-407174:3188120")
//    runtimeOnly fg.deobf("curse.maven:oh-the-biomes-youll-go-247560:4027228")
//    runtimeOnly fg.deobf("curse.maven:terrablender-563928:4013816")
//    runtimeOnly fg.deobf("curse.maven:betterend-forge-port-428877:3185939")
//    runtimeOnly fg.deobf("curse.maven:immersive-engineering-231951:3497359")
//    runtimeOnly fg.deobf("curse.maven:apotheosis-313970:3095843")
//    runtimeOnly fg.deobf("curse.maven:placebo-283644:3172794")

//    compileOnly fg.deobf("vazkii.patchouli:Patchouli:1.16.4-50")
//    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:1.16.4-50")

    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
}

shadowJar{
    configurations = [project.configurations.shade]
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "MixinConfigs"            : "emendatusenigmatica.mixins.json",
                "Specification-Title"     : "emendatusenigmatica",
                "Specification-Vendor"    : "Ridanisaurus",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "Ridanisaurus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfShadowJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

mixin {
    add sourceSets.main, "emendatusenigmatica.refmap.json"
}

// Prevent Mixin annotation processor from getting into IDEA's annotation processor settings
// Copied from Botania
if (System.getProperty("idea.sync.active") == "true") {
    afterEvaluate {
        tasks.withType(JavaCompile).all {
            it.options.annotationProcessorPath = files()
        }
    }
}

artifacts {
    archives shadowJar
    shadow shadowJar
}

reobf {
    shadowJar {
        dependsOn createMcpToSrg
        mappings = createMcpToSrg.outputs.files.singleFile
    }
}